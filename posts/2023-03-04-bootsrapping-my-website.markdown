---
title: Bootstrapping my website
author: Brendon A. Kay
tags: hakyll, haskell
---

With a new website, I figured my first post could be about getting this thing set up.
This website is currently generated by [Hakyll](http://jaspervdj.be/hakyll), a Haskell static site generator (SSG).
I say "currently" because that could change. What's nice about SSGs is you
write the content of the site in some kind of markup language and then generate the HTML,
JavaScript, and CSS with a compiler.

## Why Hakyll?
I have been learning functional programming lately out of self interest. During my
educational journey I have dabbled in Scala, JavaScript, Python, and then eventually... Haskell.
Haskell has been the most rewarding to learn in my experience so far. It has also been
the most challenging.

Haskell has been a rewarding language to learn. I think it's been the most
fulfilling out of the languages I've tried so far; Scala, some LISP dialects,
trying to write functional Go. So, I figured a good initial post could be me
getting started with my very own [Hakyll](http://jaspervdj.be/hakyll) website.

## What separates Haskell from the rest
Compiled. Statically typed with type inference. The interpreter is awesome.
The community.

## Setting up my development environment
- [NeoVim](https://neovim.io/)
- [HLS](https://github.com/haskell/haskell-language-server)
- [Stack](https://docs.haskellstack.org/en/stable/)

It helped using stack to install GHC and all other Haskell environment dependencies.
I'd be interested in taking using [Nix](https://github.com/NixOS) next time, rather than stack. Nix seems to be very popular in Haskell.

### Useful `stack` commands
Mentioned in [a Hakyll tutorial](https://jaspervdj.be/hakyll/tutorials/01-installation.html)
```
stack build
```
then
```
stack exec site watch
```
